{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "subscription": {
                "type": "string",
                "metadata": {
                "description": "Subscription ID where webapp and application gateway to be created."
                }
            },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "resourceGroup": {
                "type": "string",
                "metadata": {
                "description": "Name of the resource group where keyvault is to be created"
                }
            },
        "otherUseSecurityGroupID": {
            "type": "string"
        },
        "privateLinkVNet": {
            "type": "string",
            "metadata": {
            "description": "Name of the resource group where Webapp and application gateway to be created."
            }
        },
        "privateLinkVNetResourceGroup": {
            "type": "string",
            "metadata": {
            "description": "Name of the resource group where Webapp and application gateway to be created."
            }
        },
        "privateLinkSubnet": {
            "type": "string",
            "metadata": {
            "description": "Name of the resource group where Webapp and application gateway to be created."
            }
        },
        "keyVaultName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Vault"
            }
        },
        "sku": {
            "type": "string",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "SKU for the vault"
            }
        },
        "tenant": {
            "type": "string",
            "defaultValue": "[subscription().tenantId]",
            "metadata": {
                "description": "Tenant Id of the subscription"
            }
        },
        "enabledForDeployment": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies if the vault is enabled for a VM deployment"
            }
        },
        "enabledForTemplateDeployment": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
            }
        },
        "enabledForDiskEncryption": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
            }
        },
        "enableRbacAuthorization": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Enables RBAC authorization for the Keyvault."
            }
        },
        "enableSoftDelete": {
            "type": "bool",
            "defaultValue": true,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Enables soft delete for the Keyvault."
            }
        },
        "softDeleteRetentionInDays": {
            "type": "int",
            "defaultValue": 90,
            "metadata": {
                "description": "Enables soft delete for the Keyvault."
            }
        },
        "enablePurgeProtection": {
            "type": "bool",
            "defaultValue": true,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Enables purge ptotection for the Keyvault."
            }
        },
        "networkAcls": {
            "type": "Array",
            "metadata": {
                "description": "The network firewall defined for this vault."
            }
        },
        "tags": {
            "type": "object"
        }
    },
    "variables": {
        "accessPolicies": [
            {
                "objectId": "[parameters('otherUseSecurityGroupID')]",
                "tenantId": "[parameters('tenant')]",
                "permissions": {
                    "keys": [
                        "Get",
                        "List",
                        "Update",
                        "Create"
                    ],
                    "secrets": [
                        "Get",
                        "List",
                        "Set"
                    ],
                    "certificates": [
                        "Get",
                        "List"
                    ]
                }
            }
        ],
        "vault_nosoftdelete": {
            "enabledForDeployment": "[parameters('enabledForDeployment')]",
            "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
            "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
            "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
            "accessPolicies": "[variables('accessPolicies')]",
            "tenantId": "[parameters('tenant')]",
            "sku": {
                "name": "[parameters('sku')]",
                "family": "A"
            },
            "networkAcls":{
                    "bypass": "AzureServices",
                    "virtualNetworkRules":"[parameters('networkAcls')]",
                    "ipRules":[],
                    "defaultAction":"Deny"
                    }
        },
        "vault_softdelete_withpurge": {
            "enableSoftDelete": "[parameters('enableSoftDelete')]",
            "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
            "enablePurgeProtection": "[parameters('enablePurgeProtection')]"
        }
    },
    "resources": [
        {
            "apiVersion": "2018-02-14",
            "name": "[parameters('keyVaultName')]",
            "location": "[parameters('location')]",
            "type": "Microsoft.KeyVault/vaults",
            "tags": "[parameters('tags')]",
            "properties": "[if(parameters('enableSoftDelete'),union(variables('vault_nosoftdelete'), variables('vault_softdelete_withpurge')),variables('vault_nosoftdelete'))]"
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2020-05-01",
            "name": "[concat(parameters('keyvaultName'), 'endpoint')]",
            "location": "[parameters('Location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
            ],
            "properties": {
                "privateLinkServiceConnections": [
                    {
                        "name": "[concat(parameters('keyvaultName'), '-9fc8')]",
                        "properties": {
                            "privateLinkServiceId": "[concat('/subscriptions/',parameters('subscription'), '/resourceGroups/', parameters('resourceGroup'),'/providers/Microsoft.KeyVault/vaults/',parameters('keyvaultName'))]",
                            "groupIds": [
                                "vault"
                            ]
                        }
                    }
                ],
                "manualPrivateLinkServiceConnections": [],
                "subnet": {
                    "id": "[concat('/subscriptions/',parameters('subscription'), '/resourceGroups/', parameters('privateLinkVNetResourceGroup'), '/providers/Microsoft.Network/virtualNetworks/', parameters('privateLinkVNet'), '/subnets/', parameters('privateLinkSubnet'))]"
                },
                "customDnsConfigs": [
                    {
                        "fqdn": "[concat(parameters('keyvaultName'), '.vaultcore.azure.net')]"
                    }
                ]
            }
        }
    ],
    "outputs": {}
}
